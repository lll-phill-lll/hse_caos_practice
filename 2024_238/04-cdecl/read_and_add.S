// ** Условие **
// Написать функцию, которая считает 2 числа, положит их на стек
// затем сложит и вернет в rax сумму

    .intel_syntax noprefix
    .global main

read_and_add:
//  ------- пролог -------  (сохраняем значения регистров, которые мы не должны менять)
    push    rbp            // сохраняем старое значение rbp
    mov     rbp, rsp       // сохраняем значение rsp в rbp, чтобы дальше отсчитывать адреса от rbp, так как rsp будет двигаться

    // [    ...   ...   oldrbp   return   xxxxx]
    //      ^rsp         ^rbp
//  ------- конец пролога -------

    sub     rsp, 16         // выделим место под 2 числа - 16 байт. rsp всегда на вершине стека,
                            // так как стек растет в сторону уменьшения адресов, то нужно вычитать из rsp

    // Текущее состояние стека (слева верх, справа низ)
    //      |---|-------------------- наши два числа, для которых мы сделали sub 16. A B просто для наглядности
    //      |   |     |-------------- старое значение rbp, которое мы запушили
    //      |   |     |         |---- адрес возврата
    // [    A   B   oldrbp   return   xxxxx]
    //      ^rsp    ^rbp

    call    readi64
    mov     [rbp - 8], rax  // кладем в "B". Так как хотим положить "левее" rbp, то знак минус
                            // аналогично могли бы сделать mov [rsp + 8], rax, попали бы в ту же ячейку
                            // но это не очень удобно, потому что rbp статичный, а rsp двигается (от пушей, например)
                            // поэтому лучше отсчитывать от rbp

    call    readi64
    mov     [rbp - 16], rax  // аналогично кладем в "A"

    xor     rax, rax         // зануляем rax
    add     rax, [rbp - 16]  // прибавляем наши A и B к rax
    add     rax, [rbp - 8]

//  ------- эпилог ------- (возвращаем сохраненные значения регистров обратно)
    mov     rsp, rbp
    // Текущее состояние стека (слева верх, справа низ)
    // [    A   B   oldrbp   return   xxxxx]
    //              ^rsp,rpb
    pop     rbp
    // Текущее состояние стека (слева верх, справа низ)
    // [    A   B   oldrbp   return   xxxxx xxxxx xxxxx]
    //                       ^rsp                 ^rbp
//  -------  конец эпилога -------
    ret


    .global main
main:
    push    rbp
    mov     rbp, rsp
    call    read_and_add

    mov     rdi, rax
    call    writei64

    mov     rsp, rbp
    pop     rbp
    call    finish
